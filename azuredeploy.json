{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "Require": {
        "type": "object",
        "metadata": {
          "description": "What is required, available options are - Public IP address, existing NSG, BootDiags, Log Analytics, DSC Script, Custom Script."
        }
      },
      "artifactsLocation": {
        "type": "string",
        "metadata": {
          "description": "Part of the URI where artifacts are stored."
        }
      },
      "artifactsLocationSasToken": {
        "type": "securestring",
        "defaultValue": "",
        "metadata": {
          "description": "The SASToken required to access artifactsLocation.  Use the defaultValue if the staging location is not secured."
        }
      },
      "protocol": {
        "type": "string",
        "defaultValue": "https://",
        "metadata": {
          "description": "Part of the path which makes up the location of the linked templates are stored."
        }
      },
      "artifactsStorageAccount": {
        "type": "string",
        "metadata": {
          "description": "Part of the path which makes up the location of the linked templates are stored."
        }
      },
      "location": {
        "type": "string",
        "defaultValue": "[resourceGroup().location]",
        "metadata": {
          "description": "The Azure Region where the Resource will be located. Default is set the location of the Resource Group."
        }
      },
      "publicIpAddressType": {
        "defaultValue": "Static",
        "type": "string",
        "metadata": {
          "description": "There are two options, Static or Dynamic - Static is the default"
        }
      },
      "publicIpAddressSku": {
        "defaultValue": "Basic",
        "type": "string",
        "metadata": {
          "description": "There are two options, Basic or Standard - Basic is the default"
        }
      },
      "virtualMachineName": {
        "type": "string",
        "metadata": {
          "description": "The Name of the Virtual Machine. No default set."
        }
      },
      "osDiskType": {
        "defaultValue": "StandardSSD_LRS",
        "type": "string",
        "metadata": {
          "description": "Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk. - Standard_LRS, Premium_LRS, StandardSSD_LRS, UltraSSD_LRS, Premium_ZRS, StandardSSD_ZRS. Standard_LRS is the default"
        }
      },
      "VMSize": {
        "type": "string",
        "metadata": {
          "description": "Specifies the size of the virtual machine. No default set. to get available VM Sizes in your region. https://docs.microsoft.com/en-us/rest/api/compute/availabilitysets/listavailablesizes"
        }
      },
      "adminUsername": {
        "type": "string",
        "metadata": {
          "description": "Specifies the name of the administrator account. No default set."
        }
      },
      "adminPasswordOrKey": {
        "type": "securestring",
        "metadata": {
          "description": "Password or ssh key for the Virtual Machine. No default set."
        }
      },
      "authenticationType": {
        "type": "string",
        "defaultValue": "password",
        "allowedValues": ["password", "sshPublicKey"],
        "metadata": {
          "description": "Type of authentication to use on the Virtual Machine. Default is password."
        }
      },
      "numberOfDataDisks": {
        "type": "int",
        "defaultValue": 1,
        "metadata": {
          "description": "Number of Data Disk Required. Default is set to 1 Data Disk - this is configured with 4 partitions creating 4 Volume in windows. Any additional disk will get formatted as a whole."
        }
      },
      "operatingSystem": {
        "type": "string",
        "defaultValue": "WindowsServer_2019-DataCenter",
        "metadata": {
          "description": "Operating system to use for the virtual machine."
        },
        "allowedValues": [
          "UbuntuServer_18.04-LTS",
          "UbuntuServer_16.04-LTS",
          "WindowsServer_2012-R2-DataCenter",
          "WindowsServer_2016-DataCenter",
          "WindowsServer_2019-DataCenter",
          "RedHat_8_4",
          "RedHat_8_3",
          "RedHat_8_2",
          "Debian_9",
          "Debian_8"
        ]
      },
      "networkSecurityGroupName": {
        "type": "string",
        "metadata": {
          "description": "The name of the NSG the VM should be protected by. There is no default set."
        }
      },
      "Network": {
        "type": "object",
        "metadata": {
          "description": "The network parameters - rsg = the resource group of the vnet, vNetName = the name of the vnet to connect the VM to, SubnetName = The Subnet to put the VM in."
        }
      },
      "tags": {
        "type": "object",
        "metadata": {
          "description": "The list of tags that need to be assigned to the resources."
        }
      },
      //LOG ANALYTICS EXTENSION
      "LogAnalyticsParams": {
        "type": "object",
        "metadata": {
          "description": "Log Analytics Extension Parameter - LogAnalyticsName = The name of the Log Analytics WorkSpace, LogAnalyticsrsg = The name of the resource group where the log analytics is located."
        }
      },
      //DSC SCRIPT EXTENSION
      "DSCScriptParams": {
        "type": "object",
        "metadata": {
          "description": "DSC Script Extension Parameters - StorageAccountName = The storage account name of where the DSC script is, ScriptContainerName = the name of the container where the DSC script is, ZipFileName = The name of the Zip file, Script = the name of the script in the zip file to run, Function = the powershell configuration to run, OctopusServerUrl = The URL of the octopus server, OctopusRoles = This is an array of roles that the VM should be part of, OctopusEnvironments = This is an array of the environments that the VM should be part of, JoinOU = this should be a path to an OU in active directory, DomainUsername = The account that you join the machine to the domain as."
        }
      },
      //CUSTOM SCRIPT EXTENSION
      "CustomScriptParams": {
        "type": "object",
        "metadata": {
          "description": "Custom Script Extension Parameters - Name = The name of the Script to run, FileUris = The URI of the file to run, StorageAccountName = the name of the storage account, Timestamp = this can be changed to force the customscript to run again."
        }
      },
      //KEY VAULT EXTENSION
      "KeyVaultParams": {
        "type": "secureobject",
        "metadata": {
          "description": "Key Vault Extension Parameters - rsg = Resource Group of Key Vault, Name = The Name of the Key Vault, the list of secrets, the value should be the name of the secret in key Vault."
        }
      }
    },
  
    "variables": {
      "isWindowsOS": "[bool(contains(toLower(variables('imageReference')[parameters('operatingSystem')].offer), 'windows'))]",
      "imageReference": {
        "UbuntuServer_18.04-LTS": {
          "publisher": "Canonical",
          "offer": "UbuntuServer",
          "sku": "18.04-LTS",
          "version": "latest"
        },
        "UbuntuServer_16.04-LTS": {
          "publisher": "Canonical",
          "offer": "UbuntuServer",
          "sku": "16.04-LTS",
          "version": "latest"
        },
        "WindowsServer_2012-R2-DataCenter": {
          "publisher": "MicrosoftWindowsServer",
          "offer": "WindowsServer",
          "sku": "2012-R2-Datacenter",
          "version": "latest"
        },
        "WindowsServer_2016-DataCenter": {
          "publisher": "MicrosoftWindowsServer",
          "offer": "WindowsServer",
          "sku": "2016-Datacenter",
          "version": "latest"
        },
        "WindowsServer_2019-DataCenter": {
          "publisher": "MicrosoftWindowsServer",
          "offer": "WindowsServer",
          "sku": "2019-Datacenter",
          "version": "latest"
        },
        "RedHat_8_4": {
          "publisher": "RedHat",
          "offer": "RHEL",
          "sku": "8_4",
          "version": "latest"
        },
        "RedHat_8_3": {
          "publisher": "RedHat",
          "offer": "RHEL",
          "sku": "8_3",
          "version": "latest"
        },
        "RedHat_8_2": {
          "publisher": "RedHat",
          "offer": "RHEL",
          "sku": "8_2",
          "version": "latest"
        },
        "Debian_9": {
          "publisher": "credativ",
          "offer": "Debian",
          "sku": "9",
          "version": "latest"
        },
        "Debian_8": {
          "publisher": "credativ",
          "offer": "Debian",
          "sku": "8",
          "version": "latest"
        }
      },
      "copy": [
        {
          "name": "dataDisks",
          "count": "[if(equals(parameters('numberOfDataDisks'),0),1, parameters('numberOfDataDisks'))]",
          "input": {
            "lun": "[copyIndex('dataDisks')]",
            "createOption": "Empty",
            "diskSizeGB": "1023"
          }
        }
      ],
      "subnetRef": "[resourceId(parameters('Network').rsg,'Microsoft.Network/virtualNetworks/subnets',parameters('Network').vNetName, parameters('Network').SubnetName)]",
      "networkSecurityGroupIdExistingResourcegroup": {
        "id": "[resourceId(parameters('Network').rsg,'Microsoft.Network/networkSecurityGroups',parameters('networkSecurityGroupName'))]"
      },
      "artifactspath": "[concat(parameters('protocol'),parameters('artifactsStorageAccount'),parameters('artifactsLocation'))]",
      "networkInterfaceName": "[tolower(concat(parameters('virtualMachineName'), '-nic-',variables('uniqueSuffix')))]",
      "publicIpAddressName": "[tolower(concat(parameters('virtualMachineName'), '-pip-',variables('uniqueSuffix')))]",
      "publicIpAddressId": {
        "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIpAddressName'))]"
      },
      "vmName": "[concat(parameters('virtualMachineName'), '-', variables('uniqueSuffix'))]",
      "uniqueSuffix": "[uniqueString(resourceGroup().id)]",
      "linuxConfiguration": {
        "disablePasswordAuthentication": true,
        "ssh": {
          "publicKeys": [
            {
              "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
              "keyData": "[parameters('adminPasswordOrKey')]"
            }
          ]
        }
      },
      "windowsConfiguration": {
        "provisionVmAgent": "true"
      }
    },
    "resources": [
      {
        "comments": "THIS IS THE NETWORK INTERFACE RESOURCE.",
        "name": "[variables('networkInterfaceName')]",
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-08-01",
        "location": "[parameters('location')]",
        "dependsOn": [
          "[resourceId('Microsoft.Network/publicIPAddresses/', variables('publicIpAddressName'))]"
        ],
        "tags": "[parameters('tags')]",
        "properties": {
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "subnet": {
                  "id": "[variables('subnetRef')]"
                },
                "privateIPAllocationMethod": "Dynamic",
                "publicIPAddress": "[if(parameters('Require').PIPaddress, variables('publicIpAddressId') , json('null'))]"
              }
            }
          ],
  
          "networkSecurityGroup": "[if(parameters('Require').NSG, variables('networkSecurityGroupIdExistingResourcegroup') , json('null'))]"
        }
      },
      {
        "comments": "THIS IS THE PUBLIC IP ADDRESS RESOURCE",
        "condition": "[parameters('Require').PIPaddress]",
        "name": "[variables('publicIpAddressName')]",
        "type": "Microsoft.Network/publicIpAddresses",
        "apiVersion": "2019-02-01",
        "location": "[parameters('location')]",
        "tags": "[parameters('tags')]",
        "properties": {
          "publicIpAllocationMethod": "[parameters('publicIpAddressType')]"
        },
        "sku": {
          "name": "[parameters('publicIpAddressSku')]"
        }
      },
      {
        "comments": "THIS IS THE VIRTUAL MACHINE RESOURCE.",
        "name": "[variables('vmName')]",
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-06-01",
        "location": "[parameters('location')]",
        "identity": {
          "type": "SystemAssigned"
        },
        "tags": "[parameters('tags')]",
        "dependsOn": [
          "[resourceId('Microsoft.Network/networkInterfaces/', variables('networkInterfaceName'))]"
        ],
        "properties": {
          "hardwareProfile": {
            "vmSize": "[parameters('VMSize')]"
          },
          "osProfile": {
            "computerName": "[if(variables('isWindowsOS'), take(variables('vmName'), 15), variables('vmName'))]",
            "adminUsername": "[parameters('adminUsername')]",
            "adminPassword": "[parameters('adminPasswordOrKey')]",
            "linuxConfiguration": "[if(and(not(variables('isWindowsOS')), equals(parameters('authenticationType'), 'sshPublicKey')), variables('linuxConfiguration'), json('null'))]",
            "windowsConfiguration": "[if(variables('isWindowsOS'), variables('windowsConfiguration'), json('null'))]"
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": "[parameters('Require').BootDiags]"
            }
          },
          "storageProfile": {
            "imageReference": "[variables('imageReference')[parameters('operatingSystem')]]",
            "osdisk": {
              "name": "[concat(variables('vmName'), '-OsDisk')]",
              "createOption": "FromImage",
              "managedDisk": {
                "storageAccountType": "[parameters('osDiskType')]"
              },
              "caching": "ReadWrite"
            },
            "dataDisks": "[if(equals(parameters('numberOfDataDisks'),0),json('null'),variables('dataDisks'))]"
          },
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]"
              }
            ]
          }
        }
      },
      {
        "comments": "THIS IS THE DEPLOYMENT OF THE LOG ANALYTICS RESOURCE",
        "condition": "[parameters('Require').LogAnalytics]",
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat(variables('vmName'),'-','LogAnalytics-Deployment')]",
        "dependsOn": [
          "[resourceId('Microsoft.Compute/virtualMachines',variables('vmName'))]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(variables('artifactspath'), concat('extensions/LogAnalytics.json', parameters('artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "[parameters('location')]"
            },
            "vmName": {
              "value": "[variables('vmName')]"
            },
            "isWindowsOS": {
              "value": "[variables('isWindowsOS')]"
            },
            "LogAnalyticsrsg": {
              "value": "[parameters('LogAnalyticsParams').rsg]"
            },
            "workspaceName": {
              "value": "[parameters('LogAnalyticsParams').Name]"
            }
          }
        }
      },
      {
        "comments": "THIS IS THE DEPLOYMENT OF THE DSC SCRIPT RESOURCE",
        "condition": "[parameters('Require').DSCScript]",
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat(variables('vmName'),'-','DSCScript-Deployment')]",
        "dependsOn": [
          "[resourceId('Microsoft.Compute/virtualMachines',variables('vmName'))]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(variables('artifactspath'), concat('extensions/DSCScript.json', parameters('artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "[parameters('location')]"
            },
            "artifactslocation": {
              "value": "[parameters('artifactsLocation')]"
            },
            "protocol": {
              "value": "[parameters('protocol')]"
            },
            "vmName": {
              "value": "[variables('vmName')]"
            },
            "DSCStorageAccountName": {
              "value": "[parameters('DSCScriptParams').StorageAccountName]"
            },
            "DSCStorageAccountSasToken": {
              "reference": {
                "keyVault": {
                  "id": "[resourceId( parameters('KeyVaultParams').rsg,'Microsoft.KeyVault/vaults', parameters('keyVaultParams').name)]"
                },
                "secretName": "[parameters('KeyVaultParams').Secrets.DSCStorageAccountSasToken]"
              }
            },
            "DSCScriptContainerName": {
              "value": "[parameters('DSCScriptParams').ScriptContainerName]"
            },
            "DSCZipFileName": {
              "value": "[parameters('DSCScriptParams').ZipFileName]"
            },
            "DSCScript": {
              "value": "[parameters('DSCScriptParams').Script]"
            },
            "DSCFunction": {
              "value": "[parameters('DSCScriptParams').Function]"
            },
            "OctopusAPIKey": {
              "reference": {
                "keyVault": {
                  "id": "[resourceId( parameters('KeyVaultParams').rsg,'Microsoft.KeyVault/vaults', parameters('keyVaultParams').name)]"
                },
                "secretName": "[parameters('KeyVaultParams').Secrets.OctopusAPIKey]"
              }
            },
            "OctopusServerUrl": {
              "value": "[parameters('DSCScriptParams').OctopusServerUrl]"
            },
            "OctopusEnvironments": {
              "value": "[parameters('DSCScriptParams').OctopusEnvironments]"
            },
            "OctopusRoles": {
              "value": "[parameters('DSCScriptParams').OctopusRoles]"
            },
            "JoinOU": {
              "value": "[parameters('DSCScriptParams').JoinOU]"
            },
            "DomainUsername": {
              "value": "[parameters('DSCScriptParams').DomainUsername]"
            },
            "DomainUserPassword": {
              "reference": {
                "keyVault": {
                  "id": "[resourceId( parameters('KeyVaultParams').rsg,'Microsoft.KeyVault/vaults', parameters('keyVaultParams').Name)]"
                },
                "secretName": "[parameters('KeyVaultParams').Secrets.DomainUserPassword]"
              }
            }
          }
        }
      },
      {
        "comments": "THIS IS THE DEPLOYMENT OF THE CUSTOM SCRIPT RESOURCE",
        "condition": "[parameters('Require').CustomScript]",
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat(variables('vmName'),'-','CustomScript-Deployment')]",
        "dependsOn": [
          "[resourceId('Microsoft.Compute/virtualMachines',variables('vmName'))]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(variables('artifactspath'), concat('extensions/CustomScript.json', parameters('artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "[parameters('location')]"
            },
            "isWindowsOS": {
              "value": "[variables('isWindowsOS')]"
            },
            "vmName": {
              "value": "[variables('vmName')]"
            },
            "CustomScriptName": {
              "value": "[parameters('CustomScriptParams').Name]"
            },
            "CustomScriptTimeStamp": {
              "value": "[parameters('CustomScriptParams').TimeStamp]"
            },
            "CustomScriptfileUris": {
              "value": "[parameters('CustomScriptParams').fileUris]"
            },
            "CustomScriptStorageAccountName": {
              "value": "[parameters('CustomScriptParams').StorageAccountName]"
            },
            "CustomScriptStorageAccessKey": {
              "reference": {
                "keyVault": {
                  "id": "[resourceId( parameters('KeyVaultParams').rsg,'Microsoft.KeyVault/vaults', parameters('KeyVaultParams').Name)]"
                },
                "secretName": "[parameters('KeyVaultParams').secrets.CustomScriptStorageAccessKey]"
              }
            }
          }
        }
      }
    ],
    "outputs": {
      "adminUsername": {
        "type": "string",
        "value": "[parameters('adminUsername')]"
      },
      "PIP": {
        "type": "string",
        "value": "[if(not(parameters('Require').PIPaddress), 'no public ip', reference(resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpAddressName')), '2019-09-01').ipAddress)]"
      },
      "IP": {
        "type": "string",
        "value": "[reference(resourceId('Microsoft.Network/NetworkInterfaces', variables('networkInterfaceName')), '2019-09-01').ipConfigurations[0].properties.privateIPAddress]"
      }
    }
  }
  